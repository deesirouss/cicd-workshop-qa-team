AWSTemplateFormatVersion: '2010-09-09'
Description: 'Backend CodePipeline with comprehensive testing and deployment'

Parameters:
  GitHubOwner:
    Type: String
    Default: lfyagya
    Description: GitHub repository owner
    
  GitHubRepo:
    Type: String
    Default: cicd-workshop-qa-team
    Description: GitHub repository name
    
  GitHubBranch:
    Type: String
    Default: team6-yagya
    Description: GitHub branch to track
    
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub personal access token
    
  ECRRepository:
    Type: String
    Default: backend-app
    Description: ECR repository name
    
  EC2InstanceId:
    Type: String
    Description: EC2 instance ID for deployment
    
  SlackWebhookUrl:
    Type: String
    NoEcho: true
    Default: ""
    Description: Slack webhook URL for notifications

Resources:
  # S3 Bucket for Pipeline Artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-pipeline-artifacts'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ECR Repository
  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepository
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${ArtifactsBucket}/*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:GetParametersByPath
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cicd-workshop/*'
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                Resource: '*'

  # CodePipeline Service Role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub '${ArtifactsBucket}/*'
                  - !Ref ArtifactsBucket
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-backend-build'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: backend-buildspec.yml
      TimeoutInMinutes: 30

  # Parameter Store Values
  ECRRegistryParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cicd-workshop/ecr-registry
      Type: String
      Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com'

  ECRRepositoryParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cicd-workshop/ecr-repository
      Type: String
      Value: !Ref ECRRepository

  EC2InstanceParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cicd-workshop/ec2-instance-id
      Type: String
      Value: !Ref EC2InstanceId

  SlackWebhookParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cicd-workshop/slack-webhook-url
      Type: SecureString
      Value: !Ref SlackWebhookUrl

  TestDBHostParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cicd-workshop/test-db-host
      Type: String
      Value: localhost

  TestDBUserParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cicd-workshop/test-db-user
      Type: String
      Value: testuser

  TestDBPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cicd-workshop/test-db-password
      Type: SecureString
      Value: testpassword

  TestDBNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cicd-workshop/test-db-name
      Type: String
      Value: testdb

  # CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${AWS::StackName}-backend-pipeline'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: SourceOutput

        - Name: TestAndBuild
          Actions:
            - Name: TestAndBuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput

Outputs:
  PipelineName:
    Description: Name of the CodePipeline
    Value: !Ref CodePipeline
    Export:
      Name: !Sub '${AWS::StackName}-PipelineName'

  ECRRepositoryURI:
    Description: ECR Repository URI
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-ECRRepositoryURI'

  ArtifactsBucket:
    Description: S3 Bucket for pipeline artifacts
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactsBucket'

  CodeBuildProject:
    Description: CodeBuild project name
    Value: !Ref CodeBuildProject
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildProject'
