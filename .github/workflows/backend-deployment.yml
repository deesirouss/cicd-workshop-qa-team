name: Backend Deployment

on:
  push:
    branches:
      - team6-yagya

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Backend Tests

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run unit tests
      working-directory: ./backend
      run: |
        echo "🔬 Starting unit tests..."
        npm run test:unit
        echo "✅ Unit tests completed successfully!"
      env:
        NODE_ENV: test

    - name: Wait for PostgreSQL
      run: |
        echo "🐘 Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U testuser; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Attempt $i/30 - waiting 2 seconds..."
          sleep 2
        done
        
        # Verify connection with actual query
        PGPASSWORD=testpassword psql -h localhost -p 5432 -U testuser -d testdb -c "SELECT version();"
        echo "✅ PostgreSQL connection verified!"

    - name: Run database migrations
      working-directory: ./backend
      run: |
        echo "📋 Running database migrations..."
        npm run migrate
        echo "✅ Database migrations completed successfully!"
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: testdb
        DB_USER: testuser
        DB_PASSWORD: testpassword

    - name: Run integration tests
      working-directory: ./backend
      run: |
        echo "🔗 Starting integration tests..."
        npm run test:integration
        echo "✅ Integration tests completed successfully!"
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: testdb
        DB_USER: testuser
        DB_PASSWORD: testpassword
        PORT: 3001

    - name: Generate test summary
      if: always()
      run: |
        echo "📊 Test Execution Summary:"
        echo "========================="
        echo "✅ Unit Tests: Completed"
        echo "✅ Integration Tests: Completed"
        echo "✅ Database Migrations: Successful"
        echo "📁 Coverage reports available in artifacts"

    - name: Upload test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-coverage
        path: backend/coverage/

  deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Deploy to Production
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Validate deployment environment
      run: |
        echo "🔍 Validating deployment environment..."
        
        # Check required secrets
        if [ -z "${{ secrets.ECR_REPOSITORY }}" ]; then
          echo "❌ ECR_REPOSITORY secret not found"
          exit 1
        fi
        
        if [ -z "${{ secrets.ECR_REGISTRY }}" ]; then
          echo "❌ ECR_REGISTRY secret not found"  
          exit 1
        fi
        
        if [ -z "${{ secrets.EC2_INSTANCE_ID }}" ]; then
          echo "❌ EC2_INSTANCE_ID secret not found"
          exit 1
        fi
        
        echo "✅ All required secrets are configured"
        echo "🐳 Docker Image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
        echo "🖥️ Target Instance: ${{ secrets.EC2_INSTANCE_ID }}"

    - name: Run Backend Deployment Script
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        GITHUB_SHA: ${{ github.sha }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      run: |
        echo "🚀 Starting backend deployment..."
        chmod +x ./scripts/deploy-backend.sh
        ./scripts/deploy-backend.sh
        echo "✅ Backend deployment completed successfully!"

    - name: Verify deployment health
      run: |
        echo "🔍 Waiting for deployment to be ready..."
        sleep 30
        
        # Note: Add your backend health check URL here
        echo "⚠️ Manual verification recommended: Check your backend health endpoint"
        echo "📍 Expected URL: https://your-backend-domain/api/health"

    - name: Send Slack notification on success
      if: success() && env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"✅ Backend Deployment Successful! 🚀\\n📍 Branch: team6-yagya\\n🧪 Tests: All Passed\\n🔗 Backend: ${BACKEND_API_URL:-'Not configured'}\\n🐳 Docker Image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}\"}" \
        $SLACK_WEBHOOK_URL

    - name: Send Slack notification on failure
      if: failure() && env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"❌ Backend Deployment Failed! 🚨\\n📍 Branch: team6-yagya\\n🔍 Check: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\\n💾 Test coverage available in artifacts\"}" \
        $SLACK_WEBHOOK_URL

    - name: Log completion status
      if: always()
      run: |
        echo "🏁 Backend CI/CD Pipeline Completed"
        echo "=================================="
        echo "✅ Unit Tests: Executed"
        echo "✅ Integration Tests: Executed" 
        echo "✅ Database Migrations: Applied"
        echo "✅ Deployment: ${{ job.status }}"
        echo "📊 Coverage Report: Available in artifacts"
        echo "🔗 Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
