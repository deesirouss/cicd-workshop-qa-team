name: Cypress Tests

# on:
#   workflow_run:
#     workflows: 
#       - Frontend Deployment
#     types:
#       - completed

on:
  push:
    branches:
      - main
      - 'team6-sufi'  
      
  pull_request:
    branches:
      - main
      - 'team6-sufi'

jobs:
  test:
    name: Run Cypress E2E Tests
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      CYPRESS_BASE_URL: ${{ vars.CYPRESS_BASE_URL }}
      CYPRESS_API_URL: ${{ vars.CYPRESS_API_URL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./e2e-tests
        run: npm install

      - name: Install Cypress binary
        working-directory: ./e2e-tests
        run: npx cypress install

      - name: Run Cypress tests
        working-directory: ./e2e-tests
        run: npx cypress run
        continue-on-error: true  # so workflow continues even if tests fail

      - name: Send detailed Slack notification
        if: always()  # Ensure notification runs regardless of test results
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail  # Strict mode for better error handling

          REPORT_FILE="cypress/reports/merged.json"

          # Check if report file exists, exit with error if missing
          if [[ ! -f "$REPORT_FILE" ]]; then
            echo "‚ö†Ô∏è No Cypress report found at $REPORT_FILE"
            exit 1
          fi

          # Extract passed and failed test titles as newline-separated strings
          PASSED=$(jq -r '[.results[].suites[].tests[] | select(.pass == true) | .title] | join("\n")' "$REPORT_FILE")
          FAILED=$(jq -r '[.results[].suites[].tests[] | select(.fail == true) | .title] | join("\n")' "$REPORT_FILE")

          # Determine overall status emoji and message
          if [[ -z "$FAILED" ]]; then
            STATUS="‚úÖ All tests passed"
          else
            STATUS="üö® Some tests failed"
          fi

          # Compose Slack message payload using jq for JSON escaping and formatting
          PAYLOAD=$(jq -n --arg status "$STATUS" \
                          --arg passed "$PASSED" \
                          --arg failed "$FAILED" \
                          --arg branch "${{ github.ref_name }}" \
                          --arg url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          '{
            text: "\($status) on branch `\($branch)`\n\n*‚úÖ Passed Tests:*\n\($passed)\n\n*‚ùå Failed Tests:*\n\($failed)\n\n<\($url)|View GitHub Actions Logs>"
          }')

          # Send the payload to Slack webhook
          curl -sSL -X POST -H 'Content-type: application/json' -d "$PAYLOAD" "$SLACK_WEBHOOK_URL"
